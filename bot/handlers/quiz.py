# bot/handlers/quiz.py

import json
import os
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

router = Router()
logger = logging.getLogger("zoo_totem_bot.quiz")

# 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
class Quiz(StatesGroup):
    question = State()

# 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ data/quiz.json
QUIZ_PATH = os.path.join("./../data", "quiz.json")
with open(QUIZ_PATH, encoding="utf-8") as f:
    QUESTIONS = json.load(f)
TOTAL_QUESTIONS = len(QUESTIONS)
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {TOTAL_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")

# 3) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
@router.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(current=0, answers=[])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    await send_question(callback.message, 0, state)
    await callback.answer()

# 4) –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
async def send_question(message: Message, index: int, state: FSMContext):
    if index >= TOTAL_QUESTIONS:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
        await message.answer("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤‚Ä¶")
        await state.set_state(None)
        from bot.handlers.result import show_result
        await show_result(message, state)
        return

    q = QUESTIONS[index]
    # –°—Ç—Ä–æ–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=ans["text"],
                    callback_data=f"quiz_{index}_{i}"
                )
            ]
            for i, ans in enumerate(q["answers"])
        ]
    )
    await message.answer(
        f"‚ùì –í–æ–ø—Ä–æ—Å {index+1}/{TOTAL_QUESTIONS}:\n{q['question']}",
        reply_markup=keyboard
    )
    await state.set_state(Quiz.question)

# 5) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("quiz_"))
async def answer_question(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current = data.get("current", 0)
    answers = data.get("answers", [])

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data —Ñ–æ—Ä–º–∞—Ç–∞ "quiz_{–≤–æ–ø—Ä–æ—Å}_{–æ—Ç–≤–µ—Ç}"
    _, q_idx_str, a_idx_str = callback.data.split("_")
    q_idx, a_idx = int(q_idx_str), int(a_idx_str)

    # –î–æ–±–∏—Ä–∞–µ–º –≤–µ—Å–∞ —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    selected_weights = QUESTIONS[q_idx]["answers"][a_idx]["weights"]
    answers.append(selected_weights)
    await state.update_data(current=current + 1, answers=answers)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(None)

    logger.debug(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç {a_idx} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {q_idx}"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await send_question(callback.message, current + 1, state)
    await callback.answer()
